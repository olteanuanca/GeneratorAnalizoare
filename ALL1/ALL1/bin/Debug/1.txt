//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ALL12
{
    using System;
    using System.IO;
    
    
    public class Verify
    {
        
        // Propozitia:
        public static string[] Sentence = new string[10];
        
        // Pozitia in vector:
        public static int Position = 0;
        
        public static void Main()
        {
            Verify V=new Verify();
            V.ReadSentence();
            try{;
            I();
            if(Sentence[Position]=="$") 
 System.Console.WriteLine("Corect");
            else 
 					 System.Console.WriteLine("Incorect");
            } 
 			 catch(Exception E){ 
 						 System.Console.WriteLine(E.Message); }
  					 System.Console.Read() ;
        }
        
        public virtual void ReadSentence()
        {
            String tempSent = System.Console.ReadLine();
            Sentence=tempSent.Split(' ');
            System.Console.ReadKey();
        }
        
        static void I()
        {
            int check=0;
            if(Sentence[Position]=="repeat"){ 
 				 check=1;
            if (Sentence[Position] =="repeat") 
 					 Position++;
            I();
            if (Sentence[Position] =="until") 
 					 Position++;
            E();
            };
            if(Sentence[Position]=="i"){ 
 				 check=1;
            F();
            if (Sentence[Position] ==":=") 
 					 Position++;
            F();
            };
            if(Sentence[Position]=="if"){ 
 				 check=1;
            if (Sentence[Position] =="if") 
 					 Position++;
            E();
            if (Sentence[Position] =="then") 
 					 Position++;
            if (Sentence[Position] =="(") 
 					 Position++;
            I();
            if (Sentence[Position] ==")") 
 					 Position++;
            II();
            };
            if(check==0) throw new Exception("Another symbols expected at position");
        }
        
        static void E()
        {
            int check=0;
            if(Sentence[Position]=="i"){ 
 				 check=1;
            F();
            EI();
            };
            if(check==0) throw new Exception("Another symbols expected at position");
        }
        
        static void F()
        {
            int check=0;
            if(Sentence[Position]=="i"){ 
 				 check=1;
            if (Sentence[Position] =="i") 
 					 Position++;
            FI();
            };
            if(check==0) throw new Exception("Another symbols expected at position");
        }
        
        static void L()
        {
            int check=0;
            if(Sentence[Position]=="i"){ 
 				 check=1;
            if (Sentence[Position] =="i") 
 					 Position++;
            LI();
            };
            if(check==0) throw new Exception("Another symbols expected at position");
        }
        
        static void II()
        {
            int check=0;
            if(Sentence[Position]=="else"){ 
 				 check=1;
            if (Sentence[Position] =="else") 
 					 Position++;
            I();
            };
            if(Sentence[Position]=="until"){ 
 				 check=1;
            };
            if(Sentence[Position]==")"){ 
 				 check=1;
            };
            if(Sentence[Position]=="$"){ 
 				 check=1;
            };
            if(check==0) throw new Exception("Another symbols expected at position");
        }
        
        static void EI()
        {
            int check=0;
            if(Sentence[Position]=="<"){ 
 				 check=1;
            if (Sentence[Position] =="<") 
 					 Position++;
            F();
            };
            if(Sentence[Position]=="<="){ 
 				 check=1;
            if (Sentence[Position] =="<=") 
 					 Position++;
            F();
            };
            if(check==0) throw new Exception("Another symbols expected at position");
        }
        
        static void FI()
        {
            int check=0;
            if(Sentence[Position]=="("){ 
 				 check=1;
            if (Sentence[Position] =="(") 
 					 Position++;
            L();
            if (Sentence[Position] ==")") 
 					 Position++;
            };
            if(Sentence[Position]==":="){ 
 				 check=1;
            };
            if(Sentence[Position]=="until"){ 
 				 check=1;
            };
            if(Sentence[Position]==")"){ 
 				 check=1;
            };
            if(Sentence[Position]=="then"){ 
 				 check=1;
            };
            if(Sentence[Position]=="<"){ 
 				 check=1;
            };
            if(Sentence[Position]=="<="){ 
 				 check=1;
            };
            if(Sentence[Position]=="$"){ 
 				 check=1;
            };
            if(check==0) throw new Exception("Another symbols expected at position");
        }
        
        static void LI()
        {
            int check=0;
            if(Sentence[Position]==","){ 
 				 check=1;
            if (Sentence[Position] ==",") 
 					 Position++;
            if (Sentence[Position] =="i") 
 					 Position++;
            LI();
            };
            if(Sentence[Position]==")"){ 
 				 check=1;
            };
            if(Sentence[Position]=="$"){ 
 				 check=1;
            };
            if(check==0) throw new Exception("Another symbols expected at position");
        }
    }
}
